version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: spacex_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-spacex_launches}
      POSTGRES_USER: ${POSTGRES_USER:-spacex_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spacex_user} -d ${POSTGRES_DB:-spacex_launches}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - spacex_network

  # Redis for Celery broker and caching
  redis:
    image: redis:7-alpine
    container_name: spacex_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - spacex_network

  # FastAPI Backend Application
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/your-org/spacex-launch-tracker/backend:latest}
    container_name: spacex_backend_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-spacex_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-spacex_launches}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ADMIN_USERNAME=${ADMIN_USERNAME}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - spacex_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker for scraping tasks
  celery-worker:
    image: ${BACKEND_IMAGE:-ghcr.io/your-org/spacex-launch-tracker/backend:latest}
    container_name: spacex_celery_worker_prod
    command: celery -A src.celery_app worker --loglevel=warning --concurrency=2
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-spacex_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-spacex_launches}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - spacex_network

  # Celery Beat for scheduled tasks
  celery-beat:
    image: ${BACKEND_IMAGE:-ghcr.io/your-org/spacex-launch-tracker/backend:latest}
    container_name: spacex_celery_beat_prod
    command: celery -A src.celery_app beat --loglevel=warning
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-spacex_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-spacex_launches}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
      - ENVIRONMENT=production
      - LOG_LEVEL=${LOG_LEVEL:-WARNING}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - spacex_network

  # Next.js Frontend Application
  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/your-org/spacex-launch-tracker/frontend:latest}
    container_name: spacex_frontend_prod
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://backend:8000}
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - spacex_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: spacex_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - spacex_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  spacex_network:
    driver: bridge